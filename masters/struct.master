<%@ Master Language="C#" MasterPageFile="~/masters/layout.master" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Web" %>
<script runat="server">
	private DBLayer dbl = new DBLayer();
	private HtmlGenericControl body;
	private string db, tbl;

	protected override void OnLoad(EventArgs e) {
		body = (HtmlGenericControl)this.Master.FindControl("body");
		db = HttpContext.Current.Request.QueryString["db"];
		tbl = HttpContext.Current.Request.QueryString["tbl"];

		if (!String.IsNullOrEmpty(Request.Form["create_tbl"])) tbl_create();
		else if (String.IsNullOrEmpty(db)) return; 
		else if (!String.IsNullOrEmpty(Request.QueryString["fn"]) && Request.QueryString["fn"].Equals("create")) col_struct();
		else if (String.IsNullOrEmpty(tbl)) db_struct();
		else tbl_struct();
	}

	private void db_struct() {
		ArrayList tbls = dbl.getTableNames(db);
		if (tbls != null) {
			body.InnerHtml += "<table><tbody><tr class=\"title\"><td>&nbsp;</td><td>Name</td><td colspan=\"6\">Actions</td><td>Rows</td><td>Size</td></tr>";
			for (int i = 0; i < tbls.Count; i++) {
				string tbl = tbls[i].ToString();
				Dictionary<string, string> size = dbl.getTableSize(db, tbl);
				body.InnerHtml += "<tr class=\"" + ((i % 2 == 0) ? "even" : "odd")  + "\">" +
							 "<td><input type=\"checkbox\" id=\"" + db + "_" + tbl + "\"</td>" +
							 "<td><a href=\"struct.aspx?db=" + db + "&tbl=" + tbl + "\">" + tbl + "</a></td>" +
							 "<td><a href=\"browse.aspx?db=" + db + "&tbl=" + tbl + "\"><img src=\"img/browse.png\" alt=\"Browse \" /></a></td>" +
							 "<td><a href=\"struct.aspx?db=" + db + "&tbl=" + tbl + "\"><img src=\"img/struct.png\" alt=\"Structure\" /></a></td>" +
							 "<td><a href=\"select.aspx?db=" + db + "&tbl=" + tbl + "\"><img src=\"img/search.png\" alt=\"Search\" /></td>" +
							 "<td><a href=\"insert.aspx?db=" + db + "&tbl=" + tbl + "\"><img src=\"img/insert.png\" /></a></td>" +
							 "<td><a href=\"query.aspx?db=" + db + "&tbl=" + tbl + "&q=" + HttpUtility.UrlEncode("TRUNCATE TABLE " + tbl) + "\"><img src=\"img/empty.png\" alt=\"Empty\" /></td>" +
							 "<td><a href=\"query.aspx?db=" + db + "&q=" + HttpUtility.UrlEncode("DROP TABLE " + tbl) + "\"><img src=\"img/drop.png\" alt=\"Drop\" /></td>" +
							 "<td class=\"right\">" + size["rows"] + "</td><td class=\"right\">" + size["reserved"] + "</td></tr>";
			}
			body.InnerHtml += "<tbody></table>";
		}

		DataTable procedures = dbl.getStoredProcedures(db);
		if (procedures != null) {
			body.InnerHtml += "<br /><table><tr class=\"title\"><td>Name</td><td>Type</td><td>Modify</td><td>Remove</td><td>Return Type</td></tr>";
			for (int i = 0, len = procedures.Rows.Count; i < len; i++)
				body.InnerHtml +="<tr class=\"" + ((i % 2 == 0) ? "even" : "odd") + "\"><td>" + procedures.Rows[i][0] + "</td><td>" + procedures.Rows[i][1] + "</td><td></td><td></td><td></td></tr>";
			body.InnerHtml += "</table>";
		}
	}

	private void tbl_struct() {
		DataSet cols = dbl.getColumnInformation(db, tbl);
		if (cols != null) {
			body.InnerHtml += "<table><tbody><tr class=\"title\"><td /><td>Name</td><td>Default</td><td>Nullable</td><td>Type</td><td>Constraint</td><td>Collation</td><td colspan=\"3\" /></tr>";
			foreach (DataTable t in cols.Tables) for (int i = 0; i < t.Rows.Count; i++) {
				body.InnerHtml += "<tr class=\"" + ((i % 2 == 0) ? "even" : "odd")  + "\">" +
							 "<td><input type=\"checkbox\" id=\"" + db + "_" + tbl + "_" + t.Rows[i]["COLUMN_NAME"] + "\"</td>" +
							 "<td>" +t.Rows[i]["COLUMN_NAME"] + "</td>" +
							 "<td class=\"right\">" + ((t.Rows[i]["COLUMN_DEFAULT"].ToString().StartsWith("(")) ?
													    t.Rows[i]["COLUMN_DEFAULT"].ToString().Substring(1, t.Rows[i]["COLUMN_DEFAULT"].ToString().Length - 2) :
														t.Rows[i]["COLUMN_DEFAULT"]) + "</td>" +
							 "<td class=\"right\">" + t.Rows[i]["IS_NULLABLE"].ToString().ToLower() + "</td>" +
							 "<td class=\"right\">" + t.Rows[i]["DATA_TYPE"] + ((t.Rows[i].IsNull("CHARACTER_MAXIMUM_LENGTH")) ? "" : // strings and binary
																				 "(" + ((int.Parse(t.Rows[i]["CHARACTER_MAXIMUM_LENGTH"].ToString()) == -1) ? "MAX" :
																				 t.Rows[i]["CHARACTER_MAXIMUM_LENGTH"]) + ")") +
																			   ((t.Rows[i].IsNull("NUMERIC_PRECISION")) ? "" : // numbers
																				 "(" + ((t.Rows[i]["NUMERIC_PRECISION"])) + ((t.Rows[i].IsNull("NUMERIC_SCALE")) ? "" :
																				 ", " + t.Rows[i]["NUMERIC_SCALE"]) + ")") +
																			   ((t.Rows[i].IsNull("DATETIME_PRECISION")) ? "" : // datetimes
																				 "(" + t.Rows[i]["DATETIME_PRECISION"] + ")") + "</td>" +
							 "<td>" + t.Rows[i]["CONSTRAINT_NAME"] + "</td>" +
							 "<td>" + t.Rows[i]["COLLATION_NAME"].ToString().ToLower() + "</td>" +
							 "<td><a href=\"query.aspx?db=" + db + "&tbl=" + tbl + "&q=" + HttpUtility.UrlEncode("SELECT COUNT(*) AS Cardinality, " + t.Rows[i]["COLUMN_NAME"] + 
								" FROM " + tbl + " GROUP BY " + t.Rows[i]["COLUMN_NAME"] + " ORDER BY " + t.Rows[i]["COLUMN_NAME"]) + "\"><img src=\"img/browse.png\" /></a></td>" +
							 "<td><img src=\"img/edit.png\" /></td>" +
							 "<td><img src=\"img/drop.png\" /></td>" +
							 "</tr>";
			}
			body.InnerHtml += "</tbody></table>";
		}
	}

	private void col_struct() {
		int fields = 1;
		if (!String.IsNullOrEmpty(Request.QueryString["fields"])) int.TryParse(Request.QueryString["fields"], out fields);

		DataRowCollection types = dbl.getTypes();
		DataRowCollection collations = dbl.getCollations().Rows;

		body.InnerHtml += "Creating table: " + Request.QueryString["tbl"] + "<br /><form method=\"post\">";
		if (fields < 4) {  // vertical arrangement
			string fieldsrow = String.Empty, typesrow = String.Empty, lengthsrow = String.Empty, defaultsrow = String.Empty, collationsrow = String.Empty, nullsrow = String.Empty, identityrow = String.Empty;
			for (int i = 0; i < fields; i++) {
				string n = Convert.ToString(i);
				fieldsrow += "<td><input type=\"text\" name=\"" + n + "_name\" /></td>";
				typesrow += "<td>" + DisplayLayer.GetTypeSelect(n + "_type", types) + "</td>";
				lengthsrow += "<td><input type=\"text\" size=\"5\" name=\"" + n + "_length\" /></td>";
				defaultsrow += "<td><select name=\"" + n + "_default\">" +
										"<option value=\"none\">None</option>" +
										"<option value=\"null\">NULL</option>" +
										"<option value=\"getdate\">getdate()</option>" +
										"<option value=\"defined\">As Defined:</option>" +
									"</select><br /><input type=\"text\" size=\"15\" name=\"" + n + "_default_value\" /></td>";
				collationsrow += "<td>" + DisplayLayer.GetCollationSelect(n + "_collation", collations) + "</td>";
				nullsrow += "<td><input type=\"checkbox\" name=\"" + n + "_null\" value=\"1\" /></td>";
				identityrow += "<td><input type=\"checkbox\" name=\"" + n + "_identity\" value=\"1\" /><br />" +
									"Seed: <input type=\"text\" size=\"2\" name=\"" + n + "_identity_seed\" /> Inc: <input type=\"text\" size=\"2\" name=\"" + n + "_identity_inc\" /><br />" +
									"Not for replication: <input type=\"checkbox\" name=\"" + n + "_identity_nfr\" value=\"1\" /></td>";
			}
			body.InnerHtml += "<table><tbody>" +
								"<tr class=\"even\"><td class=\"title\">Field</td>" + fieldsrow + "</tr>" +
								"<tr class=\"odd\"><td class=\"title\">Type</td>" + typesrow + "</tr>" +
								"<tr class=\"even\"><td class=\"title\">Length(, Precision)</td>" + lengthsrow + "</tr>" +
								"<tr class=\"odd\"><td class=\"title\">Default</td>" + defaultsrow + "</tr>" +
								"<tr class=\"even\"><td class=\"title\">Collation</td>" + collationsrow + "</tr>" +
								"<tr class=\"odd\"><td class=\"title\">Null</td>" + nullsrow + "</tr>" +
								"<tr class=\"even\"><td class=\"title\">Identity</td>" + identityrow + "</tr>" +
							  "</tbody></table>";
		} else { // horizontal arrangement
			body.InnerHtml += "<table><tbody><tr class=\"title\"><td>Field</td><td>Type</td><td>Length(, Precision)</td><td>Default</td><td>Collation</td><td>Null</td><td>Identity</td></tr>";
			for (int i = 0; i < fields; i++) {
				string n = Convert.ToString(i);
				body.InnerHtml += "<tr class=\"" + ((i % 2 == 0) ? "even" : "odd") + "\"><td><input type=\"text\" name=\"" + n + "_name\" /></td>" +
									"<td>" + DisplayLayer.GetTypeSelect(n + "_type", types) + "</td>" +
									"<td><input type=\"text\" size=\"5\" name=\"" + n + "_length\" /></td>" +
									"<td><select name=\"" + n + "_default\">" +
											"<option value=\"none\">None</option>" +
											"<option value=\"null\">NULL</option>" +
											"<option value=\"defined\">As Defined:</option>" +
										"</select><br /><input type=\"text\" size=\"15\" name=\"" + n + "_default_value\" /></td>" +
									"<td>" + DisplayLayer.GetCollationSelect(n + "_collation", collations) + "</td>" +
									"<td><input type=\"checkbox\" name=\"" + n + "_null\" value=\"1\" /></td>" +
									"<td class=\"center\"><input type=\"checkbox\" name=\"" + n + "_identity\" value=\"1\"/><br />" +
										"Seed: <input type=\"text\" size=\"2\" name=\"" + n + "_identity_seed\" /> Inc: <input type=\"text\" size=\"2\" name=\"" + n + "_identity_inc\" /><br />" +
										"Not for replication: <input type=\"checkbox\" name=\"" + n + "_identity_nfr\" value=\"1\"/></td>" +
								  "</tr>";
			}
			body.InnerHtml += "</tbody></table>";
		}
		body.InnerHtml += "<input type=\"submit\" name=\"create_tbl\" value=\"Submit\" /></form>";
	}

	private void tbl_create() {
		NameValueCollection post = Request.Form;
		int fields = 1;
		if (!String.IsNullOrEmpty(Request.QueryString["fields"])) int.TryParse(Request.QueryString["fields"], out fields);
		
		ArrayList definitions = new ArrayList();

		for (int i = 0; i < fields; i++) {
			string n = Convert.ToString(i);
			if (String.IsNullOrEmpty(post[n + "_name"]) && !post[n + "_type"].Equals("timestamp")) continue; // timestamp datatype can be entered without a name

			string definition = post[n + "_name"] + " " + post[n + "_type"] + ((!String.IsNullOrEmpty(post[n + "_length"])) ? "(" + post[n + "_length"] + ")" : "");
			if (!String.IsNullOrEmpty(post[n + "_collation"])) definition += " COLLATE " + post[n + "_collation"];
			if (!String.IsNullOrEmpty(post[n + "_default"])) {
				if (post[n + "_default"].Equals("null")) definition += " DEFAULT NULL";
				if (post[n + "_default"].Equals("defined")) definition += " DEFAULT " + post[n + "_default_value"];
			}
			if (!String.IsNullOrEmpty(post[n + "_identity"]) && post[n + "_identity"].Equals("1")) {
				definition += " IDENTITY " + ((!String.IsNullOrEmpty(post[n + "_identity_seed"]) && !String.IsNullOrEmpty(post[n + "_identity_inc"])) ?
												"(" + post[n + "_identity_seed"] + "," + post[n + "_identity_inc"] + ")" : "") +
											 ((!String.IsNullOrEmpty(post[n + "_identity_nfr"]) && post[n + "_identity_nfr"].Equals("1")) ? " NOT FOR REPLICATION" : "");
			}
			if (!String.IsNullOrEmpty(post[n + "_null"]) && post[n + "_null"].Equals("1")) definition += " NULL";
			else definition += " NOT NULL";

			definitions.Add(definition);
		}

		if (dbl.createTable(db, tbl, string.Join(",", definitions.ToArray(typeof(string)) as string[]))) Response.Redirect("struct.aspx?db=" + db + "&tbl=" + tbl);
		//else Response.Redirect("query.aspx?db=" + db + "&tbl=&q=" + HttpUtility.UrlEncode(dbl.LastQuery));
	}
</script>
